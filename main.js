!function(){"use strict";var t=class{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.data=t,this.left=e,this.right=l}};const e=new class{constructor(t){this.arr=this.sortAndFilter(t),this.root=this.buildTree(this.arr,0,this.arr.length-1)}buildTree(e,l,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if(l>r)return null;const i=parseInt((l+r)/2),h=new t(e[i]);return h.left=this.buildTree(e,l,i-1,n+1),h.right=this.buildTree(e,i+1,r,n+1),h}sortAndFilter(t){const e=new Set(t);return Array.from(e).sort(((t,e)=>t-e))}insert(e){let l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;return null===l?null===this.root?(this.root=new t(e),this.root):new t(e):(e<l.data?l.left=this.insert(e,l.left):e>l.data&&(l.right=this.insert(e,l.right)),l)}delete(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;if(null===e)return null;if(t<e.data)e.left=this.delete(t,e.left);else if(t>e.data)e.right=this.delete(t,e.right);else{if(null===e.left&&null===e.right)return null;if(null===e.left)return e.right;if(null===e.right)return e.left;const t=this.findMin(e.right);e.data=t.data,e.right=this.delete(t.data,e.right)}return e}findMin(t){let e=t;for(;e&&null!==e.left;)e=e.left;return e}find(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;return null===e?null:t<e.data?this.find(t,e.left):t>e.data?this.find(t,e.right):e}levelOrderTraversal(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t=>t.data;if(!t)return[];const l=[],r=[];for(l.push(t);l.length>0;){const t=l.shift();r.push(e(t)),t.left&&l.push(t.left),t.right&&l.push(t.right)}return r}inOrderTraversal(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t=>t.data,l=[];return null!==t&&(l=l.concat(this.inOrderTraversal(t.left,e)),l.push(e(t)),l=l.concat(this.inOrderTraversal(t.right,e))),l}height(t){if(null===t)return-1;const e=this.height(t.left),l=this.height(t.right);return Math.max(e,l)+1}findDepth(t,e){let l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(null===t)return-1;if(t.data===e)return l;const r=this.findDepth(t.left,e,l+1);return-1!==r?r:this.findDepth(t.right,e,l+1)}isBalanced(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;const e=t=>{if(null===t)return{balanced:!0,height:-1};const l=e(t.left),r=e(t.right);return{balanced:l.balanced&&r.balanced&&Math.abs(l.height-r.height)<=1,height:1+Math.max(l.height,r.height)}};return e(t).balanced}rebalance(){if(!this.isBalanced()){const t=this.inOrderTraversal();this.root=this.buildTree(t,0,t.length-1)}}display(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;const e=function(t){let l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];null!==t?(null!==t.right&&e(t.right,`${l}${r?"│   ":"    "}`,!1),console.log(`${l}${r?"└── ":"┌── "}${t.data}`),null!==t.left&&e(t.left,`${l}${r?"    ":"│   "}`,!0)):console.log(`${l}${r?"└── ":"┌── "}null`)};e(t)}}(function(){const t=[];for(;t.length<100;)t.push(Math.floor(101*Math.random()));return t}());console.log("Is the tree balanced?",e.isBalanced()),console.log(e.inOrderTraversal(e.root)),e.insert(101),e.insert(141),e.insert(121),console.log("Is the tree balanced?",e.isBalanced()),e.rebalance(),console.log("Is the tree balanced?",e.isBalanced()),e.display()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,